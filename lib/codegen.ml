(* Turn AST into assembly *)

open Lexer
open Parser

let generate_begin =
  "
  //
  // Generated by Paper compiler
  //
  .global _start              // Provide program starting address to linker
  .align 2                    // Required by MacOS
  "

let generate_entrance =
  "
  _start:

  "

let generate_exit =
  "
  // Setup the parameters to exit the program
  // and then call Linux to do it.
        mov     X0, #0      // Use 0 return code
        mov     X16, #1     // Service command code 1 terminates this program
        svc     0           // Call MacOS to terminate the program
  "
type generator = {
  variables: (string, int) Hashtbl.t;
  filepath: string;
  channel: out_channel
}

let new_generator filename =
  let filepath = (Filename.chop_extension filename) ^ ".s" in
  {
    variables = Hashtbl.create 100;
    filepath;
    channel = open_out filepath
  }

let close_generator generator = close_out generator.channel

let codegen (ast: statement list) : string = 
  let _stmt = List.nth ast 0 in
  let asm = ref "" in
  (* let rec _inner stmts =
    if List.length stmts = 0 then
      ()
    else
      asm := !asm ^ "stmt\n" ^ _inner  in *)
  let output = generate_begin ^ generate_entrance ^ !asm ^ generate_exit in
  output

let test_gen () = 
  let s = "let a = 10 + 10\n" in
  let asm = s |> tokenise |> parse |> codegen in
  print_endline asm;
  let ch = open_out "test.s" in
  Printf.fprintf ch "%s" asm